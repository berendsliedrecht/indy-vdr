name: "Indy-VDR"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      publish-binaries:
        description: "Publish Binaries to Release (will create a release if no release exits for branch or tag)"
        required: true
        default: false
        type: boolean
      publish-wrappers:
        description: "Publish Wrappers to Registries"
        required: true
        default: false
        type: boolean

jobs:
#  check:
#    name: Run Checks
#    strategy:
#      matrix:
#        os: [macos-11, windows-latest, ubuntu-latest]
#    runs-on: ${{ matrix.os }}
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Install Rust toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: stable
#
#      - name: Cache cargo resources
#        uses: Swatinem/rust-cache@v1
#
#      - name: Cargo check
#        uses: actions-rs/cargo@v1
#        with:
#          command: check
#
#      - name: Cargo fmt
#        uses: actions-rs/cargo@v1
#        with:
#          command: fmt
#          args: --all -- --check
#
#      - name: Debug build
#        uses: actions-rs/cargo@v1
#        with:
#          command: build
#          args: --manifest-path libindy_vdr/Cargo.toml --features zmq_vendored
#
#  test-suite:
#    name: Run Test Suite
#    needs: [check]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Install Rust toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: stable
#
#      - name: Cache cargo resources
#        uses: Swatinem/rust-cache@v1
#
#      - name: Run node pool
#        run: |
#          docker build -f ci/indy-pool.dockerfile -t test_pool --build-arg pool_ip=10.0.0.2 ci
#          docker network create --subnet=10.0.0.0/8 indy-sdk-network
#          docker run -d --name indy_pool -p 9701-9708:9701-9708 --net=indy-sdk-network test_pool
#
#      - name: Run tests
#        uses: actions-rs/cargo@v1
#        with:
#          command: test
#          args: --manifest-path libindy_vdr/Cargo.toml --features local_nodes_pool
#
#  build-manylinux:
#    name: Build Library (Manylinux)
#    needs: [check]
#
#    strategy:
#      matrix:
#        include:
#          - os: ubuntu-latest
#            lib: libindy_vdr.so
#            container: andrewwhitehead/manylinux2014-base
#            platform: linux
#
#    container: ${{ matrix.container }}
#    runs-on: ${{ matrix.os }}
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Install Rust toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: stable
#
#      - name: Cache cargo resources
#        uses: Swatinem/rust-cache@v1
#
#      - name: Build library
#        env:
#          BUILD_TARGET: ${{ matrix.target }}
#          BUILD_FEATURES: zmq_vendored
#        run: sh ./build.sh
#
#      - name: Upload library artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: library-${{ runner.os }}
#          path: target/release/${{ matrix.lib }}
#
#      - name: Create library artifacts directory
#        if: |
#          github.event_name == 'release' || 
#          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
#        run: |
#          mkdir release-artifacts
#          cp target/release/${{ matrix.lib }} release-artifacts/
#
#      - uses: a7ul/tar-action@v1.1.2
#        if: |
#          github.event_name == 'release' || 
#          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
#        with:
#          command: c
#          cwd: release-artifacts
#          files: .
#          outPath: "library-${{ matrix.platform }}.tar.gz"
#
#      - name: Add library artifacts to release
#        if: |
#          github.event_name == 'release' || 
#          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
#        uses: svenstaro/upload-release-action@v2
#        with:
#          file: library-${{ matrix.platform }}.tar.gz
#          asset_name: "library-${{ matrix.platform }}.tar.gz"
#
#  build-release:
#    name: Build Library (MacOS/Win)
#    needs: [check]
#
#    strategy:
#      matrix:
#        include:
#          - os: macos-11
#            lib: libindy_vdr.dylib
#            target: apple-darwin
#            toolchain: beta #  beta required for aarch64-apple-darwin target
#            platform: darwin
#          - os: windows-latest
#            lib: indy_vdr.dll
#            toolchain: stable
#            platform: windows
#
#    runs-on: ${{ matrix.os }}
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Install Rust toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: ${{ matrix.toolchain }}
#
#      - name: Cache cargo resources
#        uses: Swatinem/rust-cache@v1
#
#      - name: Build library
#        env:
#          BUILD_TARGET: ${{ matrix.target }}
#          BUILD_TOOLCHAIN: ${{ matrix.toolchain }}
#          BUILD_FEATURES: zmq_vendored
#        run: sh ./build.sh
#
#      - name: Upload library artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: library-${{ runner.os }}
#          path: target/release/${{ matrix.lib }}
#
#      - name: Create library artifacts directory
#        if: |
#          github.event_name == 'release' || 
#          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
#        run: |
#          mkdir release-artifacts
#          cp target/release/${{ matrix.lib }} release-artifacts/
#
#      - uses: a7ul/tar-action@v1.1.2
#        if: |
#          github.event_name == 'release' || 
#          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
#        with:
#          command: c
#          cwd: release-artifacts
#          files: .
#          outPath: "library-${{ matrix.platform }}.tar.gz"
#
#      - name: Add library artifacts to release
#        if: |
#          github.event_name == 'release' || 
#          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
#        uses: svenstaro/upload-release-action@v2
#        with:
#          file: library-${{ matrix.platform }}.tar.gz
#          asset_name: "library-${{ matrix.platform }}.tar.gz"
#
  build-android:
    name: Build Android libraries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture:
          [
            aarch64-linux-android,
            armv7-linux-androideabi,
            i686-linux-android,
            x86_64-linux-android,
          ]

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --package=indy-vdr --target=${{ matrix.architecture }}
      - name: Save library
        uses: actions/upload-artifact@v2
        with:
          name: Save ${{ matrix.architecture }}
          path: target/${{ matrix.architecture }}/release/libindy_vdr.so
  create-android-library:
    name: Create android library
    runs-on: ubuntu-latest
    needs: [build-android]

    steps:
      - uses: actions/download-artifact@v3
      - run: |
	  sudo mkdir ./libs
	  sudo mv aarch64-linux-android   ./libs/arm64-v8a
	  sudo mv armv7-linux-androideabi ./libs/armeabi-v7a
	  sudo mv i686-linux-android      ./libs/x86
	  sudo mv x86_64-linux-android    ./libs/x86_64
      - name: Save Android library
	uses: actions/upload-artifact@v2
	with:
	  name: android-jniLibs
	  path: ./libs
      - uses: geekyeggo/delete-artifact@v1
	with:
	  name: |
	    aarch64-linux-android
	    armv7-linux-androideabi
	    i686-linux-android
	    x86_64-linux-android
	  failOnError: false

#  build-golang:
#    name: Build and Test Go wrapper
#    needs: [build-manylinux]
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: "Use Golang 1.16.x+"
#        uses: actions/setup-go@v2
#        with:
#          go-version: "^1.16.0"
#
#      - name: Fetch library artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: library-${{ runner.os }}
#
#      - name: Build and test wrapper
#        run: |
#          sudo cp libindy_vdr.so /usr/lib/
#          cd wrappers/golang
#          go run cmd/demo/demo.go
#
#  build-javascript:
#    name: Build and Test JavaScript wrapper
#    needs: [build-manylinux, build-release]
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: wrappers/javascript
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Set up Node.JS 16.x
#        uses: actions/setup-node@v3
#        with:
#          node-version: 16.x
#
#      - name: Fetch library artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: library-${{ runner.os }}
#
#      - name: Install dependencies
#        run: yarn install
#
#      - name: Build JavaScript Wrapper
#        run: yarn build
#
#      - name: Lint JavaScript Wrapper
#        run: yarn lint
#
#      - name: Format Check JavaScript Wrapper
#        run: yarn check-format
#
#      - name: Type Check JavaScript Wrapper
#        run: yarn check-types
#
#      - name: Test JavaScript Wrapper
#        env:
#          # binary is downloaded to root of repository
#          LIB_INDY_VDR_PATH: ../../../
#        run: yarn test
#
#      - name: Set NPM config
#        if: |
#          github.event_name == 'release' || 
#          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-wrappers == 'true')
#        run: |
#          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
#          echo "registry=https://registry.npmjs.org/" >> .npmrc
#          echo "always-auth=true" >> .npmrc
#
#      # TODO: this will currently publish the version as defined in the package.json. If the version already
#      # exists on NPM it will skip the publishing. This means if a new version is released, but the version hasn't been
#      # updated in the package.json files yet, it won't publish to NPM (which is kinda nice). We should however add a check
#      # to see if the JS version matches the release version (do we want to keep the js and rust version in sync?)
#      - name: Publish JavaScript Wrapper
#        if: |
#          github.event_name == 'release' || 
#          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-wrappers == 'true')
#        run: npx lerna publish from-package --no-push --no-private --yes --no-git-tag-version
#
#  # build-nodejs:
#  #   name: Build and Test NodeJS wrapper
#  #   needs: [build-manylinux]
#  #   runs-on: ubuntu-latest
#
#  #   steps:
#  #     - name: Checkout
#  #       uses: actions/checkout@v2
#
#  #     - name: Use Node.js 12.x
#  #       uses: actions/setup-node@v1
#  #       with:
#  #         node-version: 12.x
#
#  #     - name: Fetch library artifacts
#  #       uses: actions/download-artifact@v2
#  #       with:
#  #         name: library-${{ runner.os }}
#
#  #     - name: Build and test wrapper
#  #       run: |
#  #         sudo cp libindy_vdr.so /usr/lib/
#  #         cd wrappers/nodejs
#  #         npm install
#  #         npm run compile
#  #         npm run test:unit
#
#  #     - name: Run NodeJS integration tests against Sovrin Buildernet
#  #       run: |
#  #         INDY_NETWORK=SOVRIN_BUILDER_NET npm run test:integration
#  #       working-directory: wrappers/nodejs
#
#  #     - if: |
#  #         (github.event_name == 'release' ||
#  #           (github.event_name == 'workflow_dispatch' &&
#  #            github.event.inputs.publish == 'true'))
#  #       name: Publish npm package
#  #       env:
#  #         NODE_AUTH_TOKEN: ${{secrets.npm_token}}
#  #       run: |
#  #         npm ci
#  #         npm publish
#  #       working-directory: wrappers/nodejs
#
#  build-py:
#    name: Build and Test Python Wrapper
#    needs: [build-manylinux, build-release]
#
#    strategy:
#      matrix:
#        os: [ubuntu-latest, macos-11, windows-latest]
#        python-version: [3.6]
#        include:
#          - os: ubuntu-latest
#            plat-name: manylinux2014_x86_64
#          - os: macos-11
#            plat-name: macosx_10_9_universal2 # macosx_10_9_x86_64
#          - os: windows-latest
#            plat-name: win_amd64
#
#    runs-on: ${{ matrix.os }}
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install setuptools wheel twine auditwheel
#
#      - name: Fetch library artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: library-${{ runner.os }}
#          path: wrappers/python/indy_vdr/
#
#      - name: Build and test python package
#        shell: sh
#        run: |
#          python setup.py bdist_wheel --python-tag=py3 --plat-name=${{ matrix.plat-name }}
#          pip install dist/*
#          python -m demo.test
#        working-directory: wrappers/python
#
#      - if: "runner.os == 'Linux'"
#        name: Auditwheel
#        run: auditwheel show wrappers/python/dist/*
#
#      - name: Upload python package
#        uses: actions/upload-artifact@v2
#        with:
#          name: python-${{ runner.os }}
#          path: wrappers/python/dist/*
#
#      - if: |
#          github.event_name == 'release' || 
#          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-wrappers == 'true')
#        name: Publish python package
#        env:
#          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#        run: |
#          twine upload --skip-existing dist/*
#        working-directory: wrappers/python
