name: 'Indy-VDR'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      publish-binaries:
        description: 'Publish Binaries to Release (will create a release if no release exits for branch or tag)'
        required: true
        default: false
        type: boolean
      publish-wrappers:
        description: 'Publish Wrappers to Registries'
        required: true
        default: false
        type: boolean

jobs:
  build-release:
    name: Build Library

    strategy:
      matrix:
        include:
          - arch: linux-aarch64
            os: ubuntu-latest
            lib: libindy_vdr.so
            target: aarch64-unknown-linux-gnu
            use_cross: true
          - arch: linux-x86_64
            os: ubuntu-latest
            lib: libindy_vdr.so
            target: x86_64-unknown-linux-gnu
            # using cross here to build against an older glibc for compatibility
            use_cross: true
          - arch: darwin-universal
            os: macos-11
            lib: libindy_vdr.dylib
            target: apple-darwin
            # beta or nightly required for aarch64-apple-darwin target
            toolchain: beta
          - arch: windows-x86_64
            os: windows-latest
            lib: indy_vdr.dll
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain || 'stable' }}

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v2

      - if: '!matrix.use_cross'
        name: Build library
        env:
          BUILD_TARGET: ${{ matrix.target }}
          BUILD_TOOLCHAIN: ${{ matrix.toolchain || 'stable' }}
          BUILD_FEATURES: zmq_vendored
        shell: sh
        run: ./build.sh

      - if: matrix.use_cross
        name: Build library (cross)
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --lib --release --target ${{ matrix.target }} --features zmq_vendored

      - name: Upload library artifacts
        uses: actions/upload-artifact@v3
        with:
          name: library-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/${{ matrix.lib }}

      - name: Create library artifacts directory
        if: |
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
        run: |
          mkdir release-artifacts
          cp target/${{ matrix.target }}/release/${{ matrix.lib }} release-artifacts/

      - uses: a7ul/tar-action@v1.1.2
        if: |
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
        with:
          command: c
          cwd: release-artifacts
          files: .
          outPath: 'library-${{ matrix.arch }}.tar.gz'

      - name: Add library artifacts to release
        if: |
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-binaries == 'true')
        uses: svenstaro/upload-release-action@v2
        with:
          file: library-${{ matrix.arch }}.tar.gz
          asset_name: 'library-${{ matrix.arch }}.tar.gz'

  test-javascript:
    name: Test JavaScript
    needs: [build-release]

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            library: library-linux_x86_64
          - os: macos-latest
            library: library-darwin-universal
          - os: windows-latest
            library: library-windows_x86_64

    runs-on: ${{matrix.os}}
    defaults:
      run:
        working-directory: wrappers/javascript

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.JS 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Fetch library artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.library}}

      - name: Install dependencies
        run: yarn install

      - name: Build JavaScript Wrapper
        run: yarn build

      - name: Lint JavaScript Wrapper
        run: yarn lint

      - name: Format Check JavaScript Wrapper
        run: yarn check-format

      - name: Type Check JavaScript Wrapper
        run: yarn check-types

      - name: Test JavaScript Wrapper
        env:
          # binary is downloaded to root of repository
          LIB_INDY_VDR_PATH: ../../../
        run: yarn test

  build-and-release-javascript:
    name: Build and Release JavaScript wrapper
    needs: [test-javascript, build-release]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: wrappers/javascript

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.JS 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install dependencies
        run: yarn install

      - name: Build JavaScript Wrapper
        run: yarn build

      - name: Set NPM config
        if: |
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-wrappers == 'true')
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          echo "always-auth=true" >> .npmrc

      # TODO: this will currently publish the version as defined in the package.json. If the version already
      # exists on NPM it will skip the publishing. This means if a new version is released, but the version hasn't been
      # updated in the package.json files yet, it won't publish to NPM (which is kinda nice). We should however add a check
      # to see if the JS version matches the release version (do we want to keep the js and rust version in sync?)
      - name: Publish JavaScript Wrapper
        if: |
          github.event_name == 'release' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-wrappers == 'true')
        run: npx lerna publish from-package --no-push --no-private --yes --no-git-tag-version

  build-ios:
    name: Build Library (iOS)
    runs-on: macos-latest

    strategy:
      matrix:
        architecture:
          [aarch64-apple-ios, aarch64-apple-ios-sim, x86_64-apple-ios]

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.architecture }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.architecture }} --package indy-vdr
      - name: Save library
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.architecture}}
          path: target/${{ matrix.architecture }}/release/libindy_vdr.a

  create-ios-xcframework:
    name: Create iOS xcframework
    runs-on: macos-latest
    needs: build-ios

    steps:
      - uses: actions/checkout@v2
      - name: Fetch static libraries
        uses: actions/download-artifact@v3
      - run: >
          lipo -create aarch64-apple-ios-sim/libindy_vdr.a \
                       x86_64-apple-ios/libindy_vdr.a \
               -output libindy_vdr.a
      - run: >
          xcodebuild -create-xcframework \
            -library aarch64-apple-ios/libindy_vdr.a -headers ./libindy_vdr/include/libindy_vdr.h \
            -library libindy_vdr.a                   -headers ./libindy_vdr/include/libindy_vdr.h \
            -output output/indy_vdr.xcframework
      - name: Save xcframework
        uses: actions/upload-artifact@v3
        with:
          name: indy_vdr.xcframework
          path: output/

  build-android:
    name: Build library (Android)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture:
          [
            aarch64-linux-android,
            armv7-linux-androideabi,
            i686-linux-android,
            x86_64-linux-android,
          ]

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{matrix.architecture}} --package indy-vdr
      - name: Save library
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.architecture}}
          path: target/${{ matrix.architecture }}/release/libindy_vdr.so

  create-android-library:
    name: Create library (Android)
    runs-on: ubuntu-latest
    needs: build-android
    steps:
      - name: Fetch libraries
        uses: actions/download-artifact@v3
      - run: |
          sudo mkdir ./libs
          sudo mv aarch64-linux-android   ./libs/arm64-v8a
          sudo mv armv7-linux-androideabi ./libs/armeabi-v7a
          sudo mv i686-linux-android      ./libs/x86
          sudo mv x86_64-linux-android    ./libs/x86_64
      - name: Save Android library
        uses: actions/upload-artifact@v2
        with:
          name: android-libraries
          path: ./libs
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            aarch64-linux-android
            armv7-linux-androideabi
            i686-linux-android
            x86_64-linux-android
          failOnError: false

  create-ios-android-release-asset:
    name: Create iOS and Android Release Assets
    runs-on: ubuntu-latest
    needs:
      - create-ios-xcframework
      - create-android-library
        # if: |
        #   (github.event_name == 'release' ||
        #   (github.event_name == 'workflow_dispatch' &&
        #    github.event.inputs.publish == 'true'))

    steps:
      - name: Fetch Android libraries
        uses: actions/download-artifact@v3
        with:
          name: android-libraries
          path: mobile/android/

      - name: Fetch iOS Framework
        uses: actions/download-artifact@v3
        with:
          name: indy_vdr.xcframework
          path: mobile/ios/

      - run: ls -R
      - uses: a7ul/tar-action@v1.1.2
        with:
          command: c
          files: ./mobile
          outPath: 'library-ios-android.tar.gz'

      - name: Add library artifacts to release
        uses: svenstaro/upload-release-action@v2
        with:
          file: library-ios-android.tar.gz
          asset_name: 'library-ios-android.tar.gz'
